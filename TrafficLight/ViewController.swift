//
//  ViewController.swift
//  TrafficLight
//
//  Created by Вадим Горностаев on 28.11.2024.
//

import UIKit

class ViewController: UIViewController {
    
// Создаем аутлеты объекта класса UIView
    
    @IBOutlet var trafficLightColorRed: UIView!
    @IBOutlet var trafficLightColorYellow: UIView!
    @IBOutlet var trafficLightColorGreen: UIView!
    
// Создаем аутлет кнопки
    
    @IBOutlet var startButton: UIButton!
    
// Тут мы создаем массив элементов с типом UIView
    
    var trafficLightOff: [UIView] = []
    var currentIndex = 0
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
       /* trafficLightColorRed.alpha = 0.3
        trafficLightColorYellow.alpha = 0.3
        trafficLightColorGreen.alpha = 0.3 */
        
        trafficLightOff = [trafficLightColorRed, trafficLightColorYellow, trafficLightColorGreen]
        
// Тут мы используем forEach что бы замыкания применились к каждому элементу массива, $0 используется из расчета что в массиве может быть один элемент
        
        trafficLightOff.forEach { $0.alpha = 0.3 }
        trafficLightOff.forEach { $0.layer.cornerRadius = 60 }
        
      /*  trafficLightColorRed.layer.cornerRadius = 60
        trafficLightColorYellow.layer.cornerRadius = 60
        trafficLightColorGreen.layer.cornerRadius = 60 */
// скругление углов для кнопки
        
        startButton.layer.cornerRadius = 10
        
    }

    @IBAction func startButtonDidTapped(_ sender: UIButton) {
        // Делаем все элементы не видимыми
        trafficLightOff.forEach { $0.alpha = 0.3 }
        // Включаем текущий элемент (на данный момент индекс 0)
        trafficLightOff[currentIndex].alpha = 1
        // После второго нажатия  мы снова делаем все элементы не видимыми и включаем следующий элемент.
        currentIndex = (currentIndex + 1) % trafficLightOff.count
        // После первого нажатия на кнопку Заголовок меняется.
        sender.setTitle("Next", for: .normal)
        
    }
}

/*
 1. trafficLightOff.forEach { $0.alpha = 0.3 }
 Этот код выполняет цикл по всем элементам массива trafficLightOff, который содержит все элементы светофора (trafficLightColorRed, trafficLightColorYellow, trafficLightColorGreen).

 trafficLightOff.forEach — это метод, который проходит по каждому элементу массива. Он аналогичен циклу for-in, но работает более функционально и компактно.

 $0.alpha = 0.3 — $0 здесь представляет собой каждый элемент массива. То есть для каждого элемента в массиве будет установлено свойство alpha равным 0.3, что делает элементы полупрозрачными (почти невидимыми).

 Зачем это нужно?

 Мы начинаем с того, что скрываем все элементы светофора. Это необходимо, чтобы перед включением нового элемента выключить все остальные.
 2. trafficLightOff[currentIndex].alpha = 1
 После того как мы скрыли все элементы, мы делаем текущий элемент видимым. В данном случае это делается для того, чтобы включить элемент, который должен загореться по очереди.

 trafficLightOff[currentIndex] — доступ к текущему элементу массива по индексу currentIndex. Это позволяет нам работать с элементами по порядку (красный, желтый, зеленый).

 alpha = 1 — это означает, что текущий элемент становится полностью видимым (полный непрозрачный цвет). Если бы это значение было, например, 0.5, элемент был бы полупрозрачным.

 Зачем это нужно?

 Мы включаем текущий элемент, который должен гореть. Этот элемент будет иметь максимальную непрозрачность, то есть будет видимым.
 3. currentIndex = (currentIndex + 1) % trafficLightOff.count
 Теперь мы хотим обновить индекс, чтобы переключиться на следующий элемент. Для этого увеличиваем currentIndex и используем оператор остаточного деления %.

 currentIndex + 1 — увеличиваем индекс на 1. Это означает, что мы переходим к следующему элементу в массиве. Например, если currentIndex был равен 0 (красный), то станет 1 (желтый), если был равен 1 (желтый), то станет 2 (зеленый).

 % trafficLightOff.count — это оператор остаточного деления, который гарантирует, что индекс не выйдет за пределы массива. Например, если в массиве три элемента, то когда currentIndex станет 3 (после зеленого), 3 % 3 = 0, и индекс снова станет 0, что позволяет нам начать цикл заново с красного элемента.

 Зачем это нужно?

 Это позволяет нам циклично переключаться по элементам: после третьего (зеленого) возвращаемся к первому (красному).
 4. sender.setTitle("Next", for: .normal)
 Этот код меняет текст на кнопке, чтобы при каждом нажатии пользователю показывалось, что следующий шаг — это "Next".

 sender.setTitle("Next", for: .normal) — изменяет текст кнопки на "Next" в обычном (неактивном) состоянии.
 Зачем это нужно?

 Мы меняем текст кнопки на "Next", чтобы пользователю было понятно, что, нажав на кнопку, он перейдет к следующему элементу. Текст будет одинаковым для всех нажатий.
 Итог
 Теперь давайте пошагово объясним, как будет работать код при нажатии на кнопку:

 Скрываем все элементы: с помощью trafficLightOff.forEach { $0.alpha = 0.3 } мы скрываем все элементы.
 Включаем текущий элемент: с помощью trafficLightOff[currentIndex].alpha = 1 мы делаем видимым тот элемент, который соответствует текущему индексу (currentIndex).
 Переключаем индекс: с помощью currentIndex = (currentIndex + 1) % trafficLightOff.count мы переходим к следующему элементу в массиве. Когда мы доходим до последнего элемента, срабатывает оператор %, и индекс возвращается на 0 (первый элемент), создавая цикл.
 Изменяем текст кнопки: с помощью sender.setTitle("Next", for: .normal) мы обновляем текст на кнопке, чтобы пользователь знал, что при следующем нажатии произойдет переход к следующему элементу.
 Теперь ваш светофор должен переключаться между элементами по очереди: после первого элемента включается второй, после второго — третий, и затем снова первый, и так по кругу.
 */
